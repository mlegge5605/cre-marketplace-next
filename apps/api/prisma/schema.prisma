generator client { provider = "prisma-client-js" }
datasource db { provider = "postgresql"; url = env("DATABASE_URL") }

enum Role { PROPERTY_MANAGER SERVICE_PROVIDER ADMIN }
enum JobCategory { PLUMBING ELECTRICAL HVAC LANDSCAPING SNOW JANITORIAL ROOFING SECURITY ELEVATOR GLAZING OTHER }
enum JobStatus { OPEN UNDER_REVIEW ACCEPTED CONTRACT IN_PROGRESS COMPLETED CANCELLED }
enum TxType { ESCROW RELEASE REFUND }
enum TxStatus { PENDING SUCCEEDED FAILED }

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  role      Role
  createdAt DateTime @default(now())
  bids      Bid[]
  messages  Message[] @relation("UserMessages")
  reviewsTo Review[]  @relation("ReviewsTo")
  reviewsFrom Review[] @relation("ReviewsFrom")
}

model CategorySchema {
  category  String   @id
  fields    Json
  updatedAt DateTime @default(now()) @updatedAt
}

model Job {
  id          String     @id @default(uuid())
  title       String
  category    JobCategory
  status      JobStatus  @default(OPEN)
  budgetMin   Int?
  budgetMax   Int?
  city        String?
  dynamicFields Json?
  createdAt   DateTime   @default(now())
  bids        Bid[]
  events      CalendarEvent[]
  contract    Contract?
  transactions Transaction[]
  messages    Message[]
  reviews     Review[]
}

model Bid {
  id         String   @id @default(uuid())
  jobId      String
  job        Job      @relation(fields: [jobId], references: [id])
  providerId String
  amount     Int
  createdAt  DateTime @default(now())
}

model CalendarEvent {
  id        String   @id @default(uuid())
  jobId     String
  job       Job      @relation(fields: [jobId], references: [id])
  type      String
  start     DateTime
  end       DateTime
  location  String?
  notes     String?
  createdAt DateTime @default(now())
}

model Contract {
  id        String   @id @default(uuid())
  jobId     String   @unique
  job       Job      @relation(fields: [jobId], references: [id])
  status    String
  clauses   Json
  signedAt  DateTime?
  fileUrl   String?
}

model Transaction {
  id        String   @id @default(uuid())
  jobId     String
  job       Job      @relation(fields: [jobId], references: [id])
  type      TxType
  amount    Int
  status    TxStatus @default(PENDING)
  createdAt DateTime @default(now())
}

model Message {
  id        String   @id @default(uuid())
  jobId     String
  job       Job      @relation(fields: [jobId], references: [id])
  fromUserId String
  from      User     @relation("UserMessages", fields: [fromUserId], references: [id])
  body      String
  createdAt DateTime @default(now())
}

model Review {
  id         String   @id @default(uuid())
  jobId      String
  job        Job      @relation(fields: [jobId], references: [id])
  fromUserId String
  from       User     @relation("ReviewsFrom", fields: [fromUserId], references: [id])
  toUserId   String
  to         User     @relation("ReviewsTo", fields: [toUserId], references: [id])
  overall    Int
  comment    String?
  createdAt  DateTime @default(now())
}
